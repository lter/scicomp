{
  "hash": "5852a8c1c451eb7cffb927e431517a97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Team Coding: 5 Essentials\"\n---\n\n\nHave you ever had trouble running someone else's code or re-running your own old code? Working in a synthesis group can bring up challenges like these as members try to run workflows written by others or written by themselves at the last in-person meeting months ago. To make the process easier and more reproducible, here is a list of our top 5 best practices to follow as you collaborate on scripts that address your group's scientific questions. These are merely suggestions but we hope that they help facilitate seamless synthesis science!\n\n## 1. Prioritize 'Future You'\n\nIf something takes more time now but will work better in the long run, **invest the time now** to save yourself heartache in the future. This can apply to taking the time to make a document listing the scripts in a given workflow, adding descriptive comments in an existing script, and many other contexts. By investing this time now, you will save 'future you' from unnecessary labor.\n\n## 2. Always Leave Comments\n\n**Leave enough comments in your code** so that other members of your team (and 'future you'!) can understand what your script does. This is a crucial habit that will benefit you immensely. By making your code more human-readable, you open the door for improved communication among team members. This makes it easier for people who weren't involved in your workflow to jump in and give feedback if necessary or to onboard new team members who join later in the project. Plus, it is less of a hassle to edit and maintain well-commented code in the future; you can make changes without spending too much time deciphering each line of code.\n\n## 3. Use Relative File Paths\n\nWhen coding collaboratively, accounting for the difference between your folder structure and those of your colleagues becomes critical. For example, if you read in a data file using its absolute file path (e.g. \"/users/my_name/documents/project/data/raw_data/example.csv\"), only you will be able to successfully run that line of code and--by extension--your entire script! Also, the slashes between folder names are different depending on each person's computer operating system, which means even a relative file path will only work for your teammates that share your computer brand.\n\nIf you're an R user, there are two quick things you can do in your code to avoid these problems:\n\n### Relative Paths -- **Use the `dir.create` function [in your script]{.underline}** to create any necessary folders. \nNeed a data folder? Use `dir.create(\"data\")` and you'll create an empty data folder. Anyone else running your code will create the same folder and you can safely assume that part of the file path going forward.\n\n### Operating System Differences -- **Use the `file.path` function with folder names without slashes.** \nReading in data? Use `file.path(\"data\", \"raw_data\", \"site_a.csv\")` and `file.path` will automatically sense the computer's operating system and insert the correct slashes for each user.\n\nFor example, if you are already working in the directory called \"project\", then you can access example.csv using this relative file path: data/raw_data/example.csv. You can improve beyond even that by using the `file.path` function to automatically detect the computer operating system and insert the correct slash for you and anyone else running the code. We recommend using this function and assigning your file path to an object so you can use it anytime.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_path <- file.path(\"data\", \"raw_data\")\nmy_raw_data <- read.csv(file = file.path(my_path, \"example.csv\"))\n```\n:::\n\n\n## 4. Store Raw Data in the Cloud\n\nIf you're a GitHub user, you may be tempted to store your data files there, but GitHub limits the size of files allowed in repositories. Adding files larger than 50MB will receive a warning, and files larger than 100MB will be blocked. If you're working with big datasets or spatial data, you can exceed this limit pretty fast. \n\nTo avoid this, we recommend instead that you **store your raw data files in the cloud** and make them available to everyone in your group. For example, you can create a folder for raw data in a Shared Google Drive (which we can create for you!). Then, you can download the data using the `googledrive` R package or with any other Google Drive API in your preferred language. \n\n## 5. Meta-Document\n\nDocumenting every individual script is important, but it's also well worth the time and effort to **document the big picture of your workflow**. As you continue to build on your workflow, it can be hard to keep track of each script's role and how they relate to each other. You might need to update a script upstream and then try to figure out what other scripts downstream need to be updated next in order to account for the new edits. If you're not using a workflow management software, then it's best to thoroughly document how each script fits into the larger workflow. The README is a great place to document each step along the way.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}