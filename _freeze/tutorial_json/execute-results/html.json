{
  "hash": "f82f44ee27e6a6115ecc981760eed449",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Storing User-Specific Information with JSONs\"\ncode-overflow: wrap\n---\n\n\n## Overview \n\nWorking groups sometimes need to handle user-specific information in their code. For example, if your group stores your data in the cloud (e.g., in Box, in Dropbox, etc.) each user will have a different \"absolute file path\" to the synced version of the data folder on their personal computer. Similarly, groups may find it valuable to use their email address in the code. While you _could_ simply have each group member add their information (file path, email, etc.) and comment out all but one of them when you work in that script, there is a better option: user-specific JSON files!\n\nThe main advantage of this method is that <u>you and your group members do not have to manually change _any user-specific information_ in scripts</u> just because a different person runs them!\n\n### Prerequisites\n\nTo follow along with this tutorial you will need to take the following steps:\n\n- Download [R](https://cran.r-project.org/)\n- Download [RStudio](https://posit.co/downloads/)\n- Install the `ltertools` and `RJSONIO` R packages\n\nFeel free to skip any steps that you have already completed!\n\n### 1. Discuss with Your Group\n\nAs in so many facets of collaborative work, the first step is to discuss with your group. While JSONs are useful for storing user-specific information, **you and your group still need to agree on two pieces of information**:\n\n1. <u>What is the name of the JSON file that each person will have?</u>\n    - A consistent file name lets all scripts expect the same file even though the _contents_ of that file differ for each user\n2. <u>What are the 'column names' that contain the information your group wants to store?</u>\n    - Consistent 'column names' allow scripts to find the user-specific content they need under a predictable subheading\n\nWe recommend keeping it simple so **consider naming the file \"user.json\"**. Similarly, **for the 'column names' consider short, all-lowercase names that are succinct and clear** (e.g., `dropbox_path` for each user's path to a local Dropbox sync, `email` for each user's email address, etc.).\n\n### 2. Create the JSON\n\nWe have developed the [`ltertools` R package](https://github.com/lter/ltertools)--in part--to store content that is useful to collaborative teams. Among the functions included in that package is one called `make_json` that will make the JSON for each user. It accepts a \"named\" vector which is straightforward to create.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the named vector\nmy_info <- c(\"dropbox_path\" = \"~/Users/lyon/Dropbox/LTER Data/\", \n             \"email\" = \"lyon@nceas.ucsb.edu\")\n\n# Look at it\nmy_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     dropbox_path                             email \n\"~/Users/lyon/Dropbox/LTER Data/\"             \"lyon@nceas.ucsb.edu\" \n```\n\n\n:::\n:::\n\n\nOnce you have that vector prepared, it's time to use `make_json` to actually create the file that stores user-specific information. If you are working in GitHub, we recommend setting the `git_ignore` argument to `TRUE` so that the JSON you create is automatically ignored by Git. This will prevent someone from accidentally sending sensitive (or at least user-specific) information to GitHub. For a deeper dive on this topic, see our GitHub workshop [here](https://lter.github.io/workshop-github/git_ignore.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package\nlibrary(ltertools)\n\n# Make JSON\nmake_json(x = my_info, file = \"user.json\", git_ignore = TRUE)\n```\n:::\n\n\n### 3. Benefit from the JSON!\n\nNow that all group members have made a JSON with the same internal components, all that is left is to reap the rewards of your forward thinking!\n\nSee an example below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load needed library\nlibrary(RJSONIO)\n\n# Read in the JSON file\nuser_info <- RJSONIO::fromJSON(content = \"user.json\")\n\n# Use its contents!\nmy_data <- read.csv(file = file.path(user_info$dropbox_path, \"2024_data.csv\"))\n\n# Syntax is just like how you'd access a column in a dataframe\ngoogledrive::drive_auth(email = user_info$email)\n```\n:::\n\n\nNow everyone in your group can use the same script because their personal file paths are readily accessible without needing to be hard-coded! The same theory applies to any other piece of information your group finds it valuable to store in the JSON.\n\n### Bonus: Help with Finding File Paths\n\nIdentifying and manually writing out the file path you want to preserve in a JSON can be cumbersome so we've found a nice work-around (at least for Mac users) that you may find useful. \n\n1. Open Finder and navigate to the last folder in the file path (i.e.,  the most nested one)\n2. In the row of folder names in the bottom of the Finder window, right-click the folder name and select \"Copy '\\<folder name\\>' as Pathname\"\n3. Paste this into the vector you plan on giving to `make_json`\n\n<p align=\"center\">\n<img src=\"images/tutorial_jsonlite/jsonlite-1.png\" alt = \"Demonstration of how to copy the full file path for a specified folder in Mac's Finder. Simply a visual representation of the numbered steps directly above this image\" width = \"75%\"/>\n</p>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}