{
  "hash": "cd09b4a5cacaa370e3d87f90931dfa0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Storing User-Specific Information Simply\"\ncode-overflow: wrap\ncode-annotations: hover\n---\n\n\n\n\n## Overview \n\nWorking groups sometimes need to handle user-specific information in their code. For example, if your group stores your data in the cloud (e.g., in Box, in Dropbox, etc.) each user will have a different \"absolute file path\" to the synced version of the data folder on their personal computer. Similarly, groups may find it valuable to use their email address in the code. While you _could_ simply have each group member add their information (file path, email, etc.) and comment out all but one of them when you work in that script, there is a better option: creating a small file to store that information!\n\nThe main advantage of this method is that <u>you and your group members will not have to manually change _any user-specific information_ in scripts</u> just because a different person runs them!\n\n### Prerequisites\n\nTo follow along with this tutorial you will need to take the following steps:\n\n- Download [R](https://cran.r-project.org/)\n- Download [RStudio](https://posit.co/downloads/)\n\nFeel free to skip any steps that you have already completed!\n\n### 1. Discuss with Your Group\n\nAs in so many facets of collaborative work, the first step is to discuss with your group. While creating this small file is useful, **you and your group still need to agree on two pieces of information**:\n\n1. <u>What is the name of the small file that each person will have?</u>\n    - A consistent file name lets all scripts expect the same file even though the _contents_ of that file differ for each user\n2. <u>What are the column names that contain the information your group wants to store?</u>\n    - Consistent column names allow scripts to find the user-specific content they need under a predictable subheading\n\nWe recommend keeping it simple so **consider naming the file \"user.csv\"**. Similarly, **for the column names consider short, all-lowercase names that are succinct and clear** (e.g., `dropbox_path` for each user's path to a local Dropbox sync, `email` for each user's email address, etc.).\n\n### 2. Create the File\n\nCreating the file does unfortunately need to be done manually _but_ it can be done either in script form or via Microsoft Excel/etc. depending on each group member's preference. For the purposes of this tutorial, we'll demonstrate how to do this with code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the data frame\nmy_info <- data.frame(\"dropbox_path\" = \"~/Users/lyon/Dropbox/LTER Data/\", # <1>\n                      \"email\" = \"lyon@nceas.ucsb.edu\")\n\n# Look at it\nmy_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     dropbox_path               email\n1 ~/Users/lyon/Dropbox/LTER Data/ lyon@nceas.ucsb.edu\n```\n\n\n:::\n:::\n\n\n\n1. Note that the column names should be standardized across _all_ group members but the values in the rows should be unique to each user\n\n:::{.callout-warning}\n#### GitHub Note\n\nIf your group is using GitHub, <u>we strongly recommend that you add this file name to the `.gitignore` file</u>. That file tells Git what not to track changes to which is ideal because each member of your group will have a different version of `user.csv` (but they'll all share the same name).\n\nThis is especially critical if you want to store sensitive information in the user-specific file (e.g., passwords, tokens, etc.).\n\nYou can edit the `.gitignore` by clicking it in RStudio's \"Files\" pane and editing it as you would any other file. For a deeper dive on this topic, see our GitHub workshop [here](https://lter.github.io/workshop-github/git_ignore.html).\n\n:::\n\nOnce you're happy with your data frame, save a local copy as a CSV with the file name that your group agreed on.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export CSV to your computer\nwrite.csv(x = my_info, file = \"user.csv\", na = '', row.names = F)\n```\n:::\n\n\n\n\n### 3. Benefit!\n\nNow that all group members have their own version of `user.csv`, your project scripts can read it in and use it to handle any actions that require differences among users! See an example below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in user file\nuser_info <- read.csv(file = \"user.csv\")\n\n# Use its contents!\ntidy_v1 <- read.csv(file = file.path(user_info$dropbox_path, \"harmonized-data.csv\"))\n\n# Syntax is the same as accessing a column in any other dataframe\ngoogledrive::drive_auth(email = user_info$email)\n```\n:::\n\n\n\n\nNow everyone in your group can use the same script because their personal file paths are readily accessible without needing to be hard-coded! The same theory applies to any other piece of information your group finds it valuable to store.\n\n### Bonus: Help with Finding File Paths\n\nIdentifying and manually writing out the file path you want to preserve in this kind of file can be cumbersome so we've found a nice work-around (at least for Mac users) that you may find useful.\n\n1. Open Finder and navigate to the last folder in the file path (i.e.,  the most nested one)\n2. In the row of folder names in the bottom of the Finder window, right-click the folder name and select \"Copy '\\<folder name\\>' as Pathname\"\n3. Paste this into your code where you prepare to make your user-specific CSV\n\n<p align=\"center\">\n<img src=\"images/misc/mac_find-file-path.png\" alt = \"Demonstration of how to copy the full file path for a specified folder in Mac's Finder. Simply a visual representation of the numbered steps directly above this image\" width = \"75%\"/>\n</p>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}